#compdef git-hf
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for git-hubflow (https://github.com/datasift/gitflow).
#
#  Derived from Completion script for git-flow (http://github.com/nvie/gitflow).
#
#  Source: https://github.com/bobthecow/git-flow-completion
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Justin Hileman (https://github.com/bobthecow)
#  * Yusuke Muraoka (https://github.com/jbking)
#  * Vincent Driessen (https://github.com/nvie)
#  * Zifei Tong (https://github.com/chevalun)
#  * Ben O'Hara (https://github.com/benohara)
#  * Neale Swinnerton (https://github.com/sw1nn)
# ------------------------------------------------------------------------------


_git-hf ()
{
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments -C \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)

      local -a subcommands
      subcommands=(
        'init:Initialize a new git repo with support for the branching model.'
        'feature:Manage your feature branches.'
        'release:Manage your release branches.'
        'hotfix:Manage your hotfix branches.'
        'push:Push the changes from your current branch (plus any new tags) back upstream.'
        'pull:Pull upstream changes down into your master, develop, and current branches.'
        'update:Pull upstream changes down into your master and develop branches.'
        'version:Shows version information.'
      )

      _describe -t commands 'git hf' subcommands
      ;;

    (options)
      case $line[1] in

        (init)
          _arguments \
            -f'[Force setting of hubflow branches, even if already configured]' \
            -d'[Use defualt branch naming conventions and prefixes]'
          ;;

        (version)
          ;;

        (hotfix)
          __git-hf-hotfix
          ;;

        (release)
          __git-hf-release
          ;;

        (feature)
          __git-hf-feature
          ;;

        (push)
          __git-hf-push
          ;;

        (pull)
          __git-hf-pull
          ;;

        (update)
          __git-hf-update
          ;;

        (version)
          __git-hf-version
          ;;
      esac
      ;;
  esac
}

__git-hf-release ()
{
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments -C \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)

      local -a subcommands
      subcommands=(
        'list:List all your release branches (alias to `git hf release`)'
        'start:Start a new release branch.'
        'finish:Finish a release branch.'
        'cancel:Cancel a release (delete the branch).'
      )
      _describe -t commands 'git hf release' subcommands
      _arguments \
        -v'[Verbose (more) output]'
      ;;

    (options)
      case $line[1] in

        (start)
          _arguments \
            -F'[Fetch from origin before performing finish]'\
                                                ':version:__git_hf_version_list'
          ;;

        (finish)
          _arguments \
            -F'fetch from $ORIGIN before performing finish' \
            -s'sign the release tag cryptographically' \
            -u'use the given GPG-key for the digital signature (implies -s)' \
            -m'use the given tag message' \
            -p'push to $ORIGIN after performing finish' \
            -k'keep branch after performing finish' \
            -n'don''t tag this release' \
            -b'don''t back-merge $MASTER_BRANCH to be a parent of $DEVELOP_BRANCH (using tag if applicable)' \
            ':version:__git_hf_version_list'
          ;;

        (cancel)
          _arguments \
            -F"fetch from $ORIGIN before performing cancel" \
            -m"use the given tag message" \
            -p"push to $ORIGIN after performing cancel" \
            -k"keep branch after performing cancel" \
            -f"safety feature; cannot cancel a release without this flag" \
            -d"drop the changes in this release; do not merge back into develop" \
            ':version:__git_hf_version_list'
          ;;

        *)
          _arguments \
            -v'[Verbose (more) output]'
          ;;
      esac
      ;;
  esac
}

__git-hf-hotfix ()
{
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments -C \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)

      local -a subcommands
      subcommands=(
        'start:Start a new hotfix branch.'
        'finish:Finish a hotfix branch.'
        'list:List all your hotfix branches. (Alias to `git hf hotfix`)'
        'cancel:Cancel a hotfix (delete the branch).'
      )
      _describe -t commands 'git hf hotfix' subcommands
      _arguments \
        -v'[Verbose (more) output]'
      ;;

    (options)
      case $line[1] in

        (start)
          _arguments \
            -F'[Fetch from origin before performing finish]'\
                                                ':hotfix:__git_hf_version_list'\
                                                ':branch-name:__git_branch_names'
          ;;

        (finish)
          _arguments \
            -s'[Sign the release tag cryptographically]'\
                                                -u'[Use the given GPG-key for the digital signature (implies -s)]'\
                                                -m'[Use the given tag message]'\
                                                -p'[Push to $ORIGIN after performing finish]'\
                                                ':hotfix:__git_hf_hotfix_list'
          ;;

        (list)
          _arguments \
            ':hotfix:__git_hf_hotfix_list'
          ;;

        (cancel)
          _arguments \
            -F"fetch from $ORIGIN before performing cancel" \
            -m"use the given tag message" \
            -p"push to $ORIGIN after performing cancel" \
            -k"keep branch after performing cancel" \
            -f"safety feature; cannot cancel a release without this flag" \
            -d"drop the changes in this release; do not merge back into develop" \
            ':version:__git_hf_version_list'
          ;;

        *)
          _arguments \
            -v'[Verbose (more) output]'
          ;;
      esac
      ;;
  esac
}

__git-hf-feature ()
{
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments -C \
    ':command:->command' \
    '*::options:->options'

  case $state in
    (command)

      local -a subcommands
      subcommands=(
       'start:Start a new feature'
       'submit:Submit a feature'
       'finish:Finish a feature'
       'diff:Diff a feature'
       'rebase:Rebase a feature'
       'checkout:Checkout a feature'
       'cancel:Cancel a feature'
      )
      _describe -t commands 'git hf feature' subcommands
      _arguments \
        -v'[Verbose (more) output]'
      ;;

    (options)
      case $line[1] in
        (list)
          _arguments \
            ':hotfix:__git_hf_feature_list'
          ;;

        (start)
          _arguments \
            ':name:'\
            ':bash:__git_branch_names'
          ;;

        (submit)
          _arguments \
            ':name:__git_hf_feature_list'\
            ':bash:__git_branch_names'
          ;;

        (finish)
          _arguments \
            -r'[Rebase before finishing]' \
            -F'[TBD]' \
            -k'[TBD]' \
            -D'[TBD]' \
            ':name:__git_hf_feature_list'
          ;;

        (diff)
          _arguments \
            ':name:__git_hf_version_list'
          ;;

        (rebase)
          _arguments \
            -i'[Interactive]' \
            ':name:__git_hf_version_list'
          ;;

        (checkout)
          _arguments \
            ':name:__git_hf_feature_list'
          ;;

        (cancel)
          _arguments \
            -f"safety feature; cannot cancel a feature without this flag" \
            ':name:__git_hf_feature_list'
          ;;

        *)
          _arguments \
            -v'[Verbose (more) output]'
          ;;

      esac
  esac
}
__git-hf-push ()
{
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments \
    -f'[Force the push]'
}

__git-hf-pull ()
{
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments  \
    -r'[Rebase before pull]'
}

__git-hf-update ()
{
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments  \
    -p'[Prune any branches that no longer exist at origin]'
}

__git_hf_version_list ()
{
  local expl
  declare -a versions

  versions=(${${(f)"$(_call_program versions git hf release list 2> /dev/null | tr -d ' |*')"}})
  __git_command_successful || return

  _wanted versions expl 'version' compadd $versions
}

__git_hf_feature_list ()
{
  local expl
  declare -a features

  features=(${${(f)"$(_call_program features git hf feature list 2> /dev/null | tr -d ' |*')"}})
  __git_command_successful || return

  _wanted features expl 'feature' compadd $features
}

__git_remotes () {
  local expl gitdir remotes

  gitdir=$(_call_program gitdir git rev-parse --git-dir 2>/dev/null)
  __git_command_successful || return

  remotes=(${${(f)"$(_call_program remotes git config --get-regexp '"^remote\..*\.url$"')"}//#(#b)remote.(*).url */$match[1]})
  __git_command_successful || return

  # TODO: Should combine the two instead of either or.
  if (( $#remotes > 0 )); then
    _wanted remotes expl remote compadd $* - $remotes
  else
    _wanted remotes expl remote _files $* - -W "($gitdir/remotes)" -g "$gitdir/remotes/*"
  fi
}

__git_hf_hotfix_list ()
{
  local expl
  declare -a hotfixes

  hotfixes=(${${(f)"$(_call_program hotfixes git hf hotfix list 2> /dev/null | tr -d ' |*')"}})
  __git_command_successful || return

  _wanted hotfixes expl 'hotfix' compadd $hotfixes
}

__git_branch_names () {
  local expl
  declare -a branch_names

  branch_names=(${${(f)"$(_call_program branchrefs git for-each-ref --format='"%(refname)"' refs/heads 2>/dev/null)"}#refs/heads/})
  __git_command_successful || return

  _wanted branch-names expl branch-name compadd $* - $branch_names
}

__git_command_successful () {
  if (( ${#pipestatus:#0} > 0 )); then
    _message 'not a git repository'
    return 1
  fi
  return 0
}

_git-hf "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
